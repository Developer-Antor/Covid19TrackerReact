[{"/home/abrar/Documents/React-Project/ChatFirebase/src/index.js":"1","/home/abrar/Documents/React-Project/ChatFirebase/src/App.js":"2","/home/abrar/Documents/React-Project/ChatFirebase/src/Components/Box.js":"3","/home/abrar/Documents/React-Project/ChatFirebase/src/Components/Table.js":"4","/home/abrar/Documents/React-Project/ChatFirebase/src/Components/Util.js":"5","/home/abrar/Documents/React-Project/ChatFirebase/src/Components/LineGraph.js":"6"},{"size":352,"mtime":1608563947269,"results":"7","hashOfConfig":"8"},{"size":4181,"mtime":1609072249295,"results":"9","hashOfConfig":"8"},{"size":561,"mtime":1609071300306,"results":"10","hashOfConfig":"8"},{"size":383,"mtime":1608911433798,"results":"11","hashOfConfig":"8"},{"size":210,"mtime":1608996829649,"results":"12","hashOfConfig":"8"},{"size":2234,"mtime":1609071775748,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1341x2k",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/home/abrar/Documents/React-Project/ChatFirebase/src/index.js",[],["29","30"],"/home/abrar/Documents/React-Project/ChatFirebase/src/App.js",["31"],"import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Box from \"./Components/Box\";\nimport axios from \"axios\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport { FormControl, MenuItem, Select } from \"@material-ui/core\";\nimport Table from \"./Components/Table\";\nimport { sortData } from \"./Components/Util\";\nimport LineGraph from \"./Components/LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport numeral from \"numeral\";\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setcasesType] = useState(\"cases\");\n  const [color, setColor] = useState(\"#fff\");\n\n  useEffect(() => {\n    const primaryCountryInfo = axios\n      .get(\"https://disease.sh/v3/covid-19/all\")\n      .then((res) => {\n        setCountryInfo(res.data);\n        console.log(res.data);\n      });\n    return () => {\n      return primaryCountryInfo;\n    };\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = axios\n      .get(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => {\n        let countryList = response.data;\n        const countries = countryList.map((country) => {\n          return { name: country.country, value: country.countryInfo.iso2 };\n        });\n        const sortedData = sortData(response.data);\n        setCountries(countries);\n        setTableData(sortedData);\n      });\n\n    return getCountriesData;\n  }, []);\n\n  const onCountryChange = (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    axios.get(url).then((res) => {\n      setCountryInfo(countryCode);\n      setCountryInfo(res.data);\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"app-left\">\n        <div className=\"header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"header-dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => {\n                return (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <div style={{ marginTop: \"1rem\", textAlign: \"center\" }}>\n          Click on any card to see graph below.\n        </div>\n        <div className=\"app-stats\">\n          <Box\n            className=\"mybox1\"\n            onClick={(e) => {\n              setColor(\"#f0eeee\");\n              setcasesType(\"cases\");\n            }}\n            title=\"Coronavirus Cases\"\n            cases={numeral(countryInfo.todayCases).format(\"0a\")}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          ></Box>\n          <Box\n            className=\"mybox2\"\n            onClick={(e) => {\n              setColor(\"#f0eeee\");\n              setcasesType(\"recovered\");\n            }}\n            title=\"Recovered\"\n            cases={numeral(countryInfo.todayRecovered).format(\"0a\")}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          ></Box>\n          <Box\n            className=\"mybox3\"\n            onClick={(e) => {\n              setColor(\"#f0eeee\");\n              setcasesType(\"deaths\");\n            }}\n            title=\"Deaths\"\n            cases={numeral(countryInfo.todayDeaths).format(\"0a\")}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          ></Box>\n        </div>\n      </div>\n\n      <Card className=\"app-right\">\n        <CardContent>\n          <h3 className=\"card-title\">Live Cases By Country</h3>\n          <Table countries={tableData}></Table>\n          <h3 className=\"card-title\">Worldwide new {casesType}</h3>\n          <LineGraph casesType={casesType}></LineGraph>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","/home/abrar/Documents/React-Project/ChatFirebase/src/Components/Box.js",[],"/home/abrar/Documents/React-Project/ChatFirebase/src/Components/Table.js",[],"/home/abrar/Documents/React-Project/ChatFirebase/src/Components/Util.js",[],"/home/abrar/Documents/React-Project/ChatFirebase/src/Components/LineGraph.js",["32","33"],"import axios from \"axios\";\nimport numeral from \"numeral\";\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nfunction LineGraph({ casesType = \"cases\" }) {\n  const [data, setData] = useState({});\n  const [chartData, setChartData] = useState([]);\n\n  const buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data[casesType]) {\n      if (lastDataPoint) {\n        let newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    }\n\n    return chartData;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await axios\n        .get(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((res) => {\n          let data = res.data;\n          setData(buildChartData(data, casesType));\n          console.log(buildChartData(data, casesType));\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":18,"column":10,"nodeType":"40","messageId":"41","endLine":18,"endColumn":15},{"ruleId":"38","severity":1,"message":"42","line":53,"column":10,"nodeType":"40","messageId":"41","endLine":53,"endColumn":19},{"ruleId":"38","severity":1,"message":"43","line":53,"column":21,"nodeType":"40","messageId":"41","endLine":53,"endColumn":33},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'color' is assigned a value but never used.","Identifier","unusedVar","'chartData' is assigned a value but never used.","'setChartData' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]